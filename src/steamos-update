#!/bin/bash
# HoloISO updater
# Built with blackjack honestly and random other bullshit stuff i couldn't really care about
# I'm impressed that this does even work. Like literally.

# Stupid hack for OOBE to skip to login screen directly
if [[ -e "/etc/holoiso-oobe" ]]; then
     exit 7
else

if [[ $IS_ROG_ALLY_TESTVERSION ]]; then
    echo "Disabled for test versions."
    exit 7
fi

if [[ "$KDE_FULL_SESSION" == "true" ]]; then
    IS_GUI=1
fi

# Elevate ourselves or idk
if [[ $EUID -ne 0 ]];
then
    exec pkexec --disable-internal-agent "$0" "$@"
fi

# Random variables we don't really care about
info() { echo >&2 "$*"; }
BRANCH_LOCAL=$(cat /etc/holoiso-branch)

package_list_gen() {
pacman_list=$(pacman -Qu | cut -d " " -f 1 | sed 's/jupiter-hw-support//g' | tr '\n' ' ')
}

validate_pacman_conf() {
    # Update and add latest pacman config
    wget -q https://raw.githubusercontent.com/theVakhovskeIsTaken/holoiso_install_main/${BRANCH_LOCAL}/src/pacman.conf -O /tmp/cached_pacman.conf
    wget -q https://raw.githubusercontent.com/theVakhovskeIsTaken/holoiso_install_main/${BRANCH_LOCAL}/src/holomirror -O /tmp/holomirror_cached
    if [[ -f "/tmp/cached_pacman.conf" ]]; then
        if [[ "$(cat /tmp/cached_pacman.conf | grep CONFIG_VERSION | cut -d "=" -f 2 | sed 's|["'\'']||g')" -ge "$(cat /etc/pacman.conf | grep CONFIG_VERSION | cut -d "=" -f 2 | sed 's|["'\'']||g')" ]]; then
            rm /etc/pacman.conf
            mv /tmp/cached_pacman.conf /etc/pacman.conf
        fi
    fi
    if [[ -f "/tmp/holomirror_cached" ]]; then
        if [[ "$(cat /tmp/holomirror_cached | grep CONFIG_VERSION | cut -d "=" -f 2 | sed 's|["'\'']||g')" -ge "$(cat /etc/pacman.d/holo_mirrorlist | grep CONFIG_VERSION | cut -d "=" -f 2 | sed 's|["'\'']||g')" ]]; then
            rm /etc/pacman.d/holo_mirrorlist
            mv /tmp/holomirror_cached /etc/pacman.d/holo_mirrorlist
        fi
    fi
}

# Check for available OS updates.
updatecheck() {
    # validate_pacman_conf
    # Update pacman dbs
    pacman -Sy | grep -i "quiet"
        package_list_gen
        IS_LARGE_UPDATE=${#pacman_list[@]}
        if [ -n "${pacman_list}" ]; then
            info "Update available"
            echo "$(pacman -Si holoiso-main | grep Description | cut -d ":" -f 2)"
            if [ "${IS_LARGE_UPDATE}" -ge "100" ]; then
			    echo "and ${IS_LARGE_UPDATE} more packages are ready to update."
		    fi
                touch /tmp/steamos-updatepersist-sentinel
                exit 0
        else
            info "No update available"
            exit 7
        fi
}

## TODO:
## Check what Steam client actually calls on "Apply update" press
## What it does now, is what I call a lazy thing, called "I'll run the same thing, but since i wrote the sentinel it'll update anyway!"

# Check for sentinel. Sentinel detected = Update time!
if [[ "$1" == "check" ]] || [[ "$1" == "--beta" ]] || [[ "$1" == "-d" ]] || [[ "$1" == "--enable-duplicate-detection" ]] || [[ "$1" == "--supports-duplicate-detection" ]]; then
    # We don't want to update if check runs again
    updatecheck
elif [[ "$1" == "regen" ]]; then
    echo "Validating and regenerating pacman configuration. Please wait."
    validate_pacman_conf
else
    export STEAMOS_UPDATE_SENTINEL="/tmp/steamos-updatepersist-sentinel"
    export DBLOCK_FILE="/var/lib/pacman/db.lck"
    if [[ -e "$DBLOCK_FILE" ]]; then
        rm -f "$DBLOCK_FILE"
    fi
    if [[ -e "$STEAMOS_UPDATE_SENTINEL" ]]; then
        #package_list_gen
        rm -f "$STEAMOS_UPDATE_SENTINEL"
        count=1
        UPDATEDIR=/var/cache/pacman/pkg/holoiso_upd_$(echo $RANDOM | md5sum | head -c 10; echo;)
        sudo mkdir -p $UPDATEDIR
        yes | sudo pacman -Su --overwrite="*" --needed --ignore="filesystem" --ignore="jupiter-hw-support"
        echo "Cleaning up..."
        rm -rf $UPDATEDIR
        echo "Update complete. Restart your device to finish."
    else
        echo "Unable to update: $($STEAMOS_UPDATE_SENTINEL 2>&1) (Did updater set sentinel?)"
        exit 10
    fi
fi

## To be fixed
## Maybe....

if [ -n "$1" ]; then
    case "$1" in
    "check")
	    updatecheck
        ;;
    "regen")
	    validate_pacman_conf
        ;;
    "-d")
        echo "What are you gonna debug? :skullemoji:"
        updatecheck
        ;;
    "--enable-duplicate-detection")
        echo "will do"
        updatecheck
        ;;
    "--beta")
        echo "we do not care"
        updatecheck
        ;;
    "--supports-duplicate-detection")
        info "This script supports the duplicate detection option"
        exit 0
        ;;
    '')
	    updatenow
        ;;
    esac
    shift
fi
fi
